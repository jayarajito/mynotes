what is sudo?
substitute user do
The Unix command su, stands for “substitute user,” “super user,” or “switch user,” and allows you to log in as root and do whatever you want with the system. 
Sudo stands for either "substitute user do" or "super user do" and it allows you to temporarily elevate your current user account to have root privileges.

official

the sudo utility (“superuser do”) is used to carry out system administrative duties. sudo allows an authorised user to temporarily elevate their privileges using their own password instead of having to know the password belonging to the root account.

By default root user disabled, If you want to enable the root accoount set the password

sudo passwd

To disable root accouunt password
sudo passwd -l root

By default, the initial user created by the Ubuntu installer is a member of the group sudo which is added to the file /etc/sudoers as an authorised sudo user. 
To give any other account full root access through sudo, add them to the sudo group

/etc/sudoers

How to creat a user and groups?
Add user

sudo adduser jayaraj

this will crate user and group
Also while creating it prompt to password
UID/GID from range 1000 to 59999  user identifier (UID) and a group identifier (GID)
this user will automatically added to the users group
When a new user is created, the adduser utility creates a brand new home directory named /home/username

To verify your current user home directory permissions, use the following syntax:

ls -ld /home/username

By default, user home directories in Ubuntu are created with world read/execute permissions. 

You can remove the world readable-permissions using the following command:

sudo chmod 0750 /home/username


A more efficient approach would be to modify the adduser global default permissions when creating user home folders. 
To do this, edit the /etc/adduser.conf file and modify the DIR_MODE variable to something appropriate, so that all new home directories will receive the correct permissions.

DIR_MODE=0750



Delete user

sudo deluser jayaraj

Deleting an account does not remove their respective home folder. 

Remember, any user added later with the same UID/GID as the previous owner will now have access to this folder if you have not taken the necessary precautions.

You may want to change the UID/GID values to something more appropriate, such as the root account, and perhaps even relocate the folder to avoid future conflicts:

sudo chown -R root:root /home/username/
sudo mkdir /home/archived_users/
sudo mv /home/username /home/archived_users/


How to get uid/gid

id 

How to change Uid/Gid

Change a user's UID: sudo usermod -u <new_uid> <username> 
Change a user's GID: sudo groupmod -g <new_gid> <group_name> 

After changing a user's UID or GID, you'll need to manually update the ownership of any files they own using the chown command. 

How to list all the users:

cat /etc/passwd

getent passwd

How to check user groups

groups   --->this command will show current user groups
groups username -->This will show specific user name

cat /etc/group
getent group


Lock and Unlock the password

sudo passwd -l username
sudo passwd -u username

Add Delete Group

sudo addgroup groupname
sudo delgroup groupname

Add a user to Group

sudo adduser username groupname
sudo adduser jayaraj sudo
sudo usermod -aG docker $USER


How to add user into the sudo group?

sudo adduser jayaraj sudo


Password Policy

By default, Ubuntu requires a minimum password length of 6 characters, as well as some basic entropy checks.
These values are controlled in the file /etc/pam.d/common-password, which is outlined below.

password        [success=1 default=ignore]      pam_unix.so obscure sha512


To adjust the minimum length to 8 characters, change the appropriate variable to min=8. The modification is outlined below:

Note:
Basic password entropy checks and minimum length rules do not apply to the administrator using sudo-level commands to setup a new user.



Password Expiration
When creating user accounts, you should make it a policy to have a minimum and maximum password age, forcing users to change their passwords when they expire.

To view the current status of a user account:

sudo chage -l username

The output below shows interesting facts about the user account, namely that there are no policies applied:



Last password change                                    : Jan 20, 2015
Password expires                                        : never
Password inactive                                       : never
Account expires                                         : never
Minimum number of days between password change          : 0
Maximum number of days between password change          : 99999
Number of days of warning before password expires       : 7


To set any of these values, use the chage (“change age”) command, and follow the interactive prompts:

sudo chage username

The following is also an example of how you can manually change the explicit expiration date (-E) to 01/31/2015, minimum password age (-m) of 5 days, maximum password age (-M) of 90 days, inactivity period (-I) of 30 days after password expiration, and a warning time period (-W) of 14 days before password expiration:


sudo chage -E 01/31/2015 -m 5 -M 90 -I 30 -W 14 username

To verify changes, use the same syntax as mentioned previously:

sudo chage -l username

The output below shows the new policies that have been established for the account:

Last password change                                    : Jan 20, 2015
Password expires                                        : Apr 19, 2015
Password inactive                                       : May 19, 2015
Account expires                                         : Jan 31, 2015
Minimum number of days between password change          : 5
Maximum number of days between password change          : 90
Number of days of warning before password expires       : 14


SSH access by disabled passwords
Disabling or locking a user password will not prevent a user from logging into your server remotely if they have previously set up SSH public key authentication. They will still be able to gain shell access to the server, without the need for any password. Remember to check the user’s home directory for files that will allow for this type of authenticated SSH access, e.g. 
/home/username/.ssh/authorized_keys.

Remove or rename the directory .ssh/ in the user’s home folder to prevent further SSH authentication access.

Be sure to check for any established SSH connections by the disabled account, as it is possible they may have existing inbound or outbound connections – then pkill any that are found.

who | grep username  (to get the pts/# terminal)
sudo pkill -f pts/#


Restrict SSH access to only user accounts that should have it. 
For example, you may create a group called sshlogin and add the group name as the value associated with the AllowGroups variable located in the file /etc/ssh/sshd_config:


AllowGroups sshlogin


Then add your permitted SSH users to the group sshlogin, and restart the SSH service.

sudo adduser username sshlogin
sudo systemctl restart sshd.service


